(()=>{"use strict";(()=>{const e=document.querySelector(".hamburger"),t=document.querySelector(".projects"),c=document.querySelector(".add-task"),r=document.querySelector(".exit-btn");e.addEventListener("click",(()=>{t.classList.add("active")})),c.addEventListener("click",(()=>{c.classList.toggle("add-task-active")})),r.addEventListener("click",(()=>{t.classList.remove("active")}))})();const e=(e,t)=>{const c=document.querySelector(".projects-list");(function(e){for(;e.firstChild;)e.removeChild(e.firstChild)})(c),e.forEach(((e,r)=>{const o=document.createElement("li");o.classList.add("project-element"),o.dataset.index=r,o.innerHTML=`${e.name} <i class='fa-solid fa-trash-can'></i>`,o.dataset.index===t&&(o.style.color="white"),c.appendChild(o)}))};!function(){const t=document.querySelector(".project-form"),c=document.querySelector(".project-input"),r=document.querySelector(".projects-list");let o,s=[];t.addEventListener("submit",(t=>{t.preventDefault();const r=c.value;((e,t)=>{document.querySelector(".project-form");const c={name:t,list:[]};e.push(c)})(s,r),e(s,o),c.value=null})),r.addEventListener("click",(t=>{"li"===t.target.tagName.toLowerCase()&&(o=t.target.dataset.index,e(s,o))}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBQWlCLE1BRWpCLE1BQU1BLEVBQVlDLFNBQVNDLGNBQWMsY0FDbkNDLEVBQWlCRixTQUFTQyxjQUFjLGFBQ3hDRSxFQUFhSCxTQUFTQyxjQUFjLGFBQ3BDRyxFQUFjSixTQUFTQyxjQUFjLGFBRTNDRixFQUFVTSxpQkFBaUIsU0FBUyxLQUNsQ0gsRUFBZUksVUFBVUMsSUFBSSxTQUFRLElBR3ZDSixFQUFXRSxpQkFBaUIsU0FBUyxLQUNsQ0YsRUFBV0csVUFBVUUsT0FBTyxrQkFBa0IsSUFHakRKLEVBQVlDLGlCQUFpQixTQUFTLEtBQ3BDSCxFQUFlSSxVQUFVRyxPQUFPLFNBQVMsR0FHMUMsRUFuQmdCLEdBQWpCLE1Dc0JBLEVBcEJ1QixDQUFDQyxFQUFVQyxLQUMvQixNQUFNQyxFQUFzQlosU0FBU0MsY0FBYyxtQkNIaEMsU0FBU1ksR0FDNUIsS0FBT0EsRUFBUUMsWUFDYkQsRUFBUUUsWUFBWUYsRUFBUUMsV0FFakMsRURDRyxDQUFhRixHQUViRixFQUFTTSxTQUFRLENBQUNDLEVBQVNDLEtBQ3hCLE1BQU1DLEVBQWlCbkIsU0FBU29CLGNBQWMsTUFDOUNELEVBQWViLFVBQVVDLElBQUksbUJBQzdCWSxFQUFlRSxRQUFRQyxNQUFRSixFQUMvQkMsRUFBZUksVUFBWSxHQUFHTixFQUFRTyw2Q0FFcENMLEVBQWVFLFFBQVFDLFFBQVVYLElBQ2xDUSxFQUFlTSxNQUFNQyxNQUFRLFNBRzlCZCxFQUFvQmUsWUFBWVIsRUFBZSxHQUNoRCxHRWZjLFdBRWpCLE1BQU1TLEVBQWM1QixTQUFTQyxjQUFjLGlCQUNyQzRCLEVBQW1CN0IsU0FBU0MsY0FBYyxrQkFDMUM2QixFQUFjOUIsU0FBU0MsY0FBYyxrQkFFM0MsSUFDSVUsRUFEQUQsRUFBVyxHQUdma0IsRUFBWXZCLGlCQUFpQixVQUFXMEIsSUFDdENBLEVBQUVDLGlCQUNGLE1BQU1DLEVBQWFKLEVBQWlCSyxNQ1puQixFQUFDeEIsRUFBVXVCLEtBQ0xqQyxTQUFTQyxjQUFjLGlCQUFoRCxNQUNPZ0IsRUNIQyxDQUFFTyxLREdzQlMsRUNIaEJFLEtBQU0sSURJckJ6QixFQUFTMEIsS0FBS25CLEVBQVEsRURVckIsQ0FBYVAsRUFBVXVCLEdBQ3ZCLEVBQWV2QixFQUFVQyxHQUN6QmtCLEVBQWlCSyxNQUFRLElBQUksSUFHL0JKLEVBQVl6QixpQkFBaUIsU0FBVTBCLElBQ0MsT0FBbkNBLEVBQUVNLE9BQU9DLFFBQVFDLGdCQUNsQjVCLEVBQWtCb0IsRUFBRU0sT0FBT2hCLFFBQVFDLE1BQ25DLEVBQWVaLEVBQVVDLEdBQzFCLEdBR0wsQ0d0QkFELEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvbW9kdWxlcy9kb20uanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvcmVuZGVyLXByb2plY3RzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL2NsZWFyLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvcHJvamVjdHMuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvaW5pdC1wcm9qZWN0cy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvbW9kdWxlcy9wcm9qZWN0cy1mYWN0b3J5LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkb21TdHVmZiA9ICgoKSA9PiB7XG5cbmNvbnN0IGhhbWJ1cmdlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oYW1idXJnZXInKTtcbmNvbnN0IHByb2plY3RTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3RzJyk7XG5jb25zdCBhZGRUYXNrQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFkZC10YXNrJyk7XG5jb25zdCBwcm9qZWN0RXhpdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5leGl0LWJ0bicpXG5cbmhhbWJ1cmdlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgcHJvamVjdFNlY3Rpb24uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcbn0pO1xuXG5hZGRUYXNrQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgYWRkVGFza0J0bi5jbGFzc0xpc3QudG9nZ2xlKCdhZGQtdGFzay1hY3RpdmUnKTtcbn0pXG5cbnByb2plY3RFeGl0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICBwcm9qZWN0U2VjdGlvbi5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbn0pXG5cbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGRvbVN0dWZmO1xuXG4iLCJpbXBvcnQgY2xlYXJFbGVtZW50IGZyb20gJy4vY2xlYXItZWxlbWVudCc7XG5cbmNvbnN0IHJlbmRlclByb2plY3RzID0gKHByb2plY3RzLCBzZWxlY3RlZFByb2plY3QpID0+IHtcbiAgIGNvbnN0IHByb2plY3RzTGlzdEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdHMtbGlzdCcpO1xuXG4gICBjbGVhckVsZW1lbnQocHJvamVjdHNMaXN0RWxlbWVudCk7XG5cbiAgIHByb2plY3RzLmZvckVhY2goKHByb2plY3QsIGkpID0+IHtcbiAgICAgIGNvbnN0IHByb2plY3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgIHByb2plY3RFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3Byb2plY3QtZWxlbWVudCcpO1xuICAgICAgcHJvamVjdEVsZW1lbnQuZGF0YXNldC5pbmRleCA9IGk7XG4gICAgICBwcm9qZWN0RWxlbWVudC5pbm5lckhUTUwgPSBgJHtwcm9qZWN0Lm5hbWV9IDxpIGNsYXNzPSdmYS1zb2xpZCBmYS10cmFzaC1jYW4nPjwvaT5gO1xuXG4gICAgIGlmKHByb2plY3RFbGVtZW50LmRhdGFzZXQuaW5kZXggPT09IHNlbGVjdGVkUHJvamVjdCl7XG4gICAgICAgcHJvamVjdEVsZW1lbnQuc3R5bGUuY29sb3IgPSAnd2hpdGUnO1xuICAgICB9XG5cbiAgICAgIHByb2plY3RzTGlzdEVsZW1lbnQuYXBwZW5kQ2hpbGQocHJvamVjdEVsZW1lbnQpO1xuICAgfSk7XG5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHJlbmRlclByb2plY3RzOyBcbiIsIiBjb25zdCBjbGVhckVsZW1lbnQgPSBmdW5jdGlvbihlbGVtZW50KXtcbiAgIHdoaWxlIChlbGVtZW50LmZpcnN0Q2hpbGQpe1xuICAgICBlbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQuZmlyc3RDaGlsZCk7IFxuICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGVhckVsZW1lbnQ7XG4iLCJpbXBvcnQgaW5pdFByb2plY3RzIGZyb20gJy4vaW5pdC1wcm9qZWN0cyc7XG5pbXBvcnQgcmVuZGVyUHJvamVjdHMgZnJvbSAnLi9yZW5kZXItcHJvamVjdHMnO1xuXG5jb25zdCBwcm9qZWN0c0pzID0gZnVuY3Rpb24gKCkge1xuXG4gIGNvbnN0IHByb2plY3RGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3QtZm9ybScpO1xuICBjb25zdCBwcm9qZWN0Rm9ybUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3QtaW5wdXQnKTtcbiAgY29uc3QgcHJvamVjdExpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdHMtbGlzdCcpO1xuXG4gIGxldCBwcm9qZWN0cyA9IFtdO1xuICBsZXQgc2VsZWN0ZWRQcm9qZWN0O1xuXG4gIHByb2plY3RGb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IGlucHV0VmFsdWUgPSBwcm9qZWN0Rm9ybUlucHV0LnZhbHVlO1xuICAgIGluaXRQcm9qZWN0cyhwcm9qZWN0cywgaW5wdXRWYWx1ZSk7XG4gICAgcmVuZGVyUHJvamVjdHMocHJvamVjdHMsIHNlbGVjdGVkUHJvamVjdCk7XG4gICAgcHJvamVjdEZvcm1JbnB1dC52YWx1ZSA9IG51bGw7XG4gIH0pO1xuXG4gIHByb2plY3RMaXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICBpZihlLnRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdsaScpe1xuICAgICAgc2VsZWN0ZWRQcm9qZWN0ID0gZS50YXJnZXQuZGF0YXNldC5pbmRleDtcbiAgICAgIHJlbmRlclByb2plY3RzKHByb2plY3RzLCBzZWxlY3RlZFByb2plY3QpO1xuICAgIH07XG4gIH0pO1xuXG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0c0pzO1xuXG5cbiIsImltcG9ydCBwcm9qZWN0RmFjdG9yeSBmcm9tICcuL3Byb2plY3RzLWZhY3RvcnknO1xuXG5jb25zdCBpbml0UHJvamVjdHMgPSAocHJvamVjdHMsIGlucHV0VmFsdWUpPT4ge1xuICBjb25zdCBwcm9qZWN0Rm9ybUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3QtZm9ybScpXG4gICBjb25zdCBwcm9qZWN0ID0gcHJvamVjdEZhY3RvcnkoaW5wdXRWYWx1ZSk7XG4gICBwcm9qZWN0cy5wdXNoKHByb2plY3QpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaW5pdFByb2plY3RzO1xuIiwiY29uc3QgcHJvamVjdEZhY3RvcnkgPSAoIG5hbWUgKSA9PiB7XG4gICByZXR1cm4geyBuYW1lLCBsaXN0OiBbXSB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0RmFjdG9yeTtcblxuICBcbiIsImltcG9ydCBkb21TdHVmZiBmcm9tICcuL21vZHVsZXMvZG9tJztcbmltcG9ydCBwcm9qZWN0c0pzIGZyb20gJy4vbW9kdWxlcy9wcm9qZWN0cy5qcydcblxuZG9tU3R1ZmZcblxucHJvamVjdHNKcygpO1xuXG5cblxuIl0sIm5hbWVzIjpbImhhbWJ1cmdlciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInByb2plY3RTZWN0aW9uIiwiYWRkVGFza0J0biIsInByb2plY3RFeGl0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsYXNzTGlzdCIsImFkZCIsInRvZ2dsZSIsInJlbW92ZSIsInByb2plY3RzIiwic2VsZWN0ZWRQcm9qZWN0IiwicHJvamVjdHNMaXN0RWxlbWVudCIsImVsZW1lbnQiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJmb3JFYWNoIiwicHJvamVjdCIsImkiLCJwcm9qZWN0RWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJkYXRhc2V0IiwiaW5kZXgiLCJpbm5lckhUTUwiLCJuYW1lIiwic3R5bGUiLCJjb2xvciIsImFwcGVuZENoaWxkIiwicHJvamVjdEZvcm0iLCJwcm9qZWN0Rm9ybUlucHV0IiwicHJvamVjdExpc3QiLCJlIiwicHJldmVudERlZmF1bHQiLCJpbnB1dFZhbHVlIiwidmFsdWUiLCJsaXN0IiwicHVzaCIsInRhcmdldCIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=